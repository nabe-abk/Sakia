use strict;
use Time::HiRes();
#-------------------------------------------------------------------------------
# Timer
#						(C)2022 nabe@abk
#-------------------------------------------------------------------------------
package Sakia::Timer;
our $VERSION = '1.00';
################################################################################
# constructor
################################################################################
sub new {
	bless({}, shift);
}

################################################################################
# main
################################################################################
sub start {
	my ($self, $name) = @_;

	$self->{"tm_$name"} = Time::HiRes::time();
	$self->{"ps_$name"} = 0;
}

#-------------------------------------------------------------------------------
sub check {
	my ($self, $name) = @_;

	if (! $self->{"tm_$name"}) { return 0; }
	if (  $self->{"ps_$name"}) { return $self->{"df_$name"}; }
	return (Time::HiRes::time() - $self->{"tm_$name"}) + $self->{"df_$name"};
}

#-------------------------------------------------------------------------------
sub stop {
	my ($self, $name) = @_;

	if (! $self->{"tm_$name"}) { return; }
	if (  $self->{"ps_$name"}) { return $self->{"df_$name"}; }

	my $diff = $self->check($name);
	if (!defined $diff) { return ; }
	$self->{"ps_$name"} = 1;
	return ($self->{"df_$name"} = $diff);
}

#-------------------------------------------------------------------------------
sub clear {
	my ($self, $name) = @_;

	undef $self->{"tm_$name"};
	undef $self->{"ps_$name"};
	undef $self->{"df_$name"};
}

#-------------------------------------------------------------------------------
sub now {
	return Time::HiRes::time();
}

1;
